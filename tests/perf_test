#!/usr/bin/python2.6
import castle
import cProfile

def gen_key_tuple(max_key, dims):
    max_key_str = str(max_key)
    max_key_len = len(max_key_str)
    if max_key_len % dims != 0:
        raise Exception("max_key_len must be cleanly divisible by dims")
    key_len_per_dim = max_key_len / dims

    print "Generating keys with "+str(dims)+" dimensions, each with "+str(key_len_per_dim)+" chars."

    for x in range(0, max_key+1):
        key_str=str(x).zfill(max_key_len)
        klist = list()
        for y in range(0, max_key_len, key_len_per_dim):
            kdim = key_str[y:y+key_len_per_dim]
            klist.append(kdim)
        ktuple = tuple(klist)
        yield ktuple



def insert_perf_test():
    #castle.pycastle_log.setLevel(logging.INFO)
    #castle.pycastle_log.setLevel(logging.DEBUG)
    castle.disable_logging()

    #this value is inserted (as a string) for every key
    insert_val = "12345678"

    max_key = 999999
    dims = 2

    micasa = castle.Castle()
    foo = micasa.collection_create("perf")

    print "Created new collection, starting inserts now"
    inserts = 0

    try:
        print "Inserting value \""+str(insert_val)+"\" to "+str(dims)+" dimensional keys (up to "+str(max_key+1)+" keys)"
        for key in gen_key_tuple(max_key, dims):
            foo[key] = insert_val
            inserts+=1
            if inserts % 20000 == 0:
                print str(inserts)+" inserts done."
    except KeyboardInterrupt:
        print "Did "+str(inserts)+" inserts."
        print "Test interrupted."
        raise

    print "Did "+str(inserts)+" inserts."
    print "Test complete."


if __name__ == '__main__':
    cProfile.run('insert_perf_test()')

